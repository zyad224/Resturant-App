{"version":3,"file":"cjs.js","sources":["src/utils.js","src/latlng.js","src/compute-distance-between.js","src/compute-signed-area.js","src/compute-area.js","src/compute-heading.js","src/compute-length.js","src/compute-offset.js","src/interpolate.js","src/index.js"],"sourcesContent":["/** @type {number} Earth's radius (at the Ecuator) of 6378137 meters. */\nexport const EARTH_RADIUS = 6378137;\n\nexport function toDegrees(radians) {\n\treturn radians * 180 / Math.PI;\n}\n\nexport function toRadians(angleDegrees) {\n\treturn angleDegrees * Math.PI / 180.0;\n}","const LAT = Symbol('Latitude');\nconst LNG = Symbol('Longitude');\n\nconst has = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\n\n/**\n * Converts an object into a LatLng. Tries a few different methods:\n * 1. If instanceof LatLng, clone and return the object\n * 2. If it has 'lat' and 'lng' properties...\n *    2a. if the properties are functions (like Google LatLngs), \n *        use the lat() and lng() values as lat and lng\n *    2b. otherwise get lat and lng, parse them as floats and try them\n * 3. If it has 'lat' and *'long'* properties,\n *    parse them as floats and return a LatLng\n * 4. If it has number values for 0 and 1, use 1 as latitude and 0\n *    as longitude.\n * 5. If it has x and y properties, try using y as latitude and x and \n *    longitude.\n * @param {any} like\n * @param {function} [Class=LatLng]\n * @returns {LatLng}\n */\nexport function convert(like, Class = LatLng) {\n\tif (like instanceof LatLng) return new Class(like[LAT], like[LNG]);\n\telse if (has(like, 'lat') && has(like, 'lng')) {\n\t\tif (typeof like.lat == 'function' && typeof like.lng == 'function')\t{\n\t\t\treturn new Class(like.lat(), like.lng());\n\t\t} else {\n\t\t\treturn new Class(parseFloat(like.lat), parseFloat(like.lng));\n\t\t}\n\t} else if (has(like, 'lat') && has(like, 'long')) {\n\t\treturn new Class(parseFloat(like.lat), parseFloat(like.long));\n\t} else if (typeof like[0] === 'number' &&\ttypeof like[1] === 'number') {\n\t\treturn new Class(like[1], like[0]);\n\t} else if (has(like, 'x') && has(like, 'y')) {\n\t\treturn new Class(parseFloat(like.y), parseFloat(like.x));\n\t}\n}\n\n/**\n * Comparison function\n * @param {LatLng} one\n * @param {LatLng} two\n * @returns {boolean}\n */\nexport function equals(one, two) {\n\tone = convert(one); two = convert(two);\n\treturn (\n\t\tMath.abs(one[LAT] - two[LAT] < Number.EPSILON) &&\n\t\tMath.abs(one[LNG] - two[LNG] < Number.EPSILON)\n\t)\n}\n\nexport default class LatLng {\n\tconstructor(lat, lng, noWrap = false) {\n\t\tlat = parseFloat(lat);\n\t\tlng = parseFloat(lng);\n\n\t\tif (Number.isNaN(lat) || Number.isNaN(lng)) {\n\t\t\tthrow TypeError('lat or lng are not numbers');\n\t\t}\n\t\t\n\t\tif (!noWrap) {\n\t\t\t//Constrain lat to -90, 90\n\t\t\tlat = Math.min(Math.max(lat, -90), 90);\n\t\t\t//Wrap lng using modulo\n\t\t\tlng = lng==180 ? lng : ((lng + 180) % 360 + 360) % 360 - 180 \n\t\t}\n\n\t\tObject.defineProperty(this, LAT, {value: lat});\n\t\tObject.defineProperty(this, LNG, {value: lng});\n\t\tthis.length = 2;\n\t}\n\t\n\t/**\n\t * Comparison function\n\t * @param {LatLng} other\n\t * @returns {boolean}\n\t */\n\tequals(other) {return equals(this, other);}\n\t\n\t/**\n\t * Returns the latitude in degrees.\n\t * (I'd rather use getters but this is for consistency)\n\t * @returns {number}\n\t */\n\tlat() {return this[LAT];}\n\n\t/**\n\t * Returns the longitude in degrees.\n\t * (I'd rather use getters but this is for consistency)\n\t * @returns {number}\n\t */\n\tlng() {return this[LNG];}\n\n\t/** @type {number} alias for lng */\n\tget x() {return this[LNG]}\n\t/** @type {number} alias for lat */\n\tget y() {return this[LAT]}\n\t/** @type {number} alias for lng */\n\tget 0() {return this[LNG]}\n\t/** @type {number} alias for lat */\n\tget 1() {return this[LAT]}\n\t/** @type {number} alias for lng */\n\tget long() {return this[LNG]}\n\t\n\t/**\n\t * Converts to JSON representation. This function is intented to be used via\n\t * JSON.stringify.\n\t * @returns {Object} LatLngLiteral\n\t */\n\ttoJSON() {\n\t\treturn {lat: this[LAT], lng: this[LNG]};\n\t}\n\t\n\t/**\n\t * Converts to string representation.\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn `(${this[LAT]}, ${this[LNG]})`;\n\t}\n\t\n\t/**\n\t * Returns a string of the form \"lat,lng\" for this LatLng. We round the \n\t * lat/lng values to 6 decimal places by default.\n\t * @param {number} [precision=6]\n\t * @returns {string}\n\t */\n\ttoUrlValue(precision = 6) {\n\t\tprecision = parseInt(precision);\n\t\treturn this[LAT].toFixed(precision) + ',' + this[LNG].toFixed(precision);\n\t}\n}","import {EARTH_RADIUS, toRadians} from './utils.js';\nimport {convert} from './latlng.js';\n\n/**\n * Returns the distance, in meters, between to LatLngs. You can optionally \n * specify a custom radius. The radius defaults to the radius of the Earth.\n * @param {LatLng} from\n * @param {LatLng} to\n * @param {number} [radius]\n * @returns {number} distance\n */\nexport default function computeDistanceBetween(from, to, radius = EARTH_RADIUS) \n{\n\tfrom = convert(from); to = convert(to);\n\tconst radFromLat = toRadians(from.lat()), radFromLng = toRadians(from.lng());\n\tconst radToLat = toRadians(to.lat()), radToLng = toRadians(to.lng());\n\treturn 2 * Math.asin(Math.sqrt(\n\t\tMath.pow(Math.sin((radFromLat - radToLat) / 2), 2) \n\t\t+ Math.cos(radFromLat) * Math.cos(radToLat) * \n\t\tMath.pow(Math.sin((radFromLng - radToLng) / 2), 2)\n\t)) * radius;\n}","import {EARTH_RADIUS, toRadians} from './utils.js';\nimport computeDistanceBetween from './compute-distance-between.js';\nimport {convert} from './latlng.js';\n\n/**\n * Returns the signed area of a closed path. The signed area may be used to \n * determine the orientation of the path. The computed area uses the same units \n * as the radius. The radius defaults to the Earth's radius in meters, in which \n * case the area is in square meters.\n * @param {LatLng[]} loop\n * @param {number} [radius]\n * @returns {number}\n */\nexport default function computeSignedArea(loop, radius = EARTH_RADIUS) {\n\tif (loop.length < 3) return 0;\n\tloop = loop.map(v => convert(v));\n\n\tlet e = 0;\n\tfor (let i = 1; i < loop.length - 1; i++) {\n\t\te += computeSphericalExcess([loop[0], loop[i], loop[i+1]]);\n\t}\n\n\treturn e * Math.pow(radius, 2);\n}\n\n/**\n * Computes the spherical excess.\n * Uses L'Huilier's Theorem.\n * @param {LatLng[]} polygon\n * @param {boolean} [options.signed=true]\n * @returns {number}\n */\nexport function computeSphericalExcess(polygon, options = {}) {\n\tconst {signed = true} = options;\n\tif (polygon.length !== 3) throw TypeError();\n\tlet distances = [], sumOfDistances = 0;\n\n\tfor (let i = 0; i < polygon.length - 1; i++) {\n\t\tdistances[i] = computeDistanceBetween(\n\t\t\tpolygon[i], polygon[i + 1],\n\t\t\t1\n\t\t);\n\t\tsumOfDistances += distances[i];\n\t}\n\n\tconst semiPerimeter = sumOfDistances / 2;\n\tlet tan = Math.tan(semiPerimeter / 2);\n\tfor (const distance of distances) \n\t\ttan *= Math.tan((semiPerimeter - distance) / 2);\n\t\n\tconst sphericalExcess = 4 * Math.atan(Math.sqrt(Math.abs(tan)));\n\n\tif (!signed) return sphericalExcess;\n\t\n\tconst v = polygon.map(point => {\n\t\tconst lat = toRadians(point.lat()), lng = toRadians(point.lng());\n\t\treturn [\n\t\t\tMath.cos(lat) * Math.cos(lng),\n\t\t\tMath.cos(lat) * Math.sin(lng),\n\t\t\tMath.sin(lat)\n\t\t];\n\t});\n\n\tconst sign = \n\t\t( v[0][0] * v[1][1] * v[2][2] \n\t\t+ v[1][0] * v[2][1] * v[0][2] \n\t\t+ v[2][0] * v[0][1] * v[1][2] \n\t\t- v[0][0] * v[2][1] * v[1][2] \n\t\t- v[1][0] * v[0][1] * v[2][2] \n\t\t- v[2][0] * v[1][1] * v[0][2] ) > 0 ? 1 : -1;\n\t\n\treturn sphericalExcess * sign;\n}","import {computeSphericalExcess} from './compute-signed-area.js'\nimport {convert} from './latlng.js';\n\n/**\n * Returns the area of a closed path. The computed area uses the same units as \n * the radius. The radius defaults to the Earth's radius in meters, in which \n * case the area is in square meters.\n * @param {LatLng[]} path\n * @param {number} [radius]\n * @returns {number} area\n */\nexport default function computeArea(path, radius) {\n\tif (path.length < 3) return 0;\n\tpath = path.map(v => convert(v));\n\n\tlet e = 0;\n\tfor (let i = 1; i < path.length - 1; i++) \n\t\te += computeSphericalExcess([path[0], path[i], path[i+1]], {signed: false});\n\n\treturn e * Math.pow(radius, 2);\n}","import {convert} from './latlng.js';\nimport {toRadians, toDegrees} from './utils.js'\n\nconst fmod = (a, b) => Number((a - (Math.floor(a / b) * b)).toPrecision(8));\n\n/**\n * Returns the heading from one LatLng to another LatLng. Headings are expresss\n * in degrees clockwise from North within the range [-180, 180).\n * @param {LatLng} from\n * @param {LatLng} to\n * @returns {number}\n */\nexport default function computeHeading(from, to) {\n\tfrom = convert(from); to = convert(to);\n\tconst fromLat = toRadians(from.lat()),\n\t\ttoLat = toRadians(to.lat()),\n\t\tdeltaLng = toRadians(to.lng()) - toRadians(from.lng());\n\t\n\tconst angle = toDegrees(\n\t\tMath.atan2(\n\t\t\tMath.sin(deltaLng) * Math.cos(toLat), \n\t\t\tMath.cos(fromLat) * Math.sin(toLat) - \n\t\t\tMath.sin(fromLat) * Math.cos(toLat) * Math.cos(deltaLng)\n\t\t)\n\t);\n\n\tif (angle === 180) return angle;\n\telse return fmod( (fmod((angle - -180), 360) + 360), 360 ) + -180;\n}","import {EARTH_RADIUS} from './utils.js';\nimport computeDistanceBetween from './compute-distance-between.js';\n\n/**\n * Returns the length of the given path.\n * @param {LatLng[]} path\n * @param {number} [radius]\n * @returns {number}\n */\nexport default function computeLength(path, radius = EARTH_RADIUS) {\n\tlet length = 0;\n\tfor (let i = 0; i < path.length - 1; i++) \n\t\tlength += computeDistanceBetween(path[i], path[i+1], radius);\n\treturn length;\n}","import {EARTH_RADIUS, toDegrees, toRadians} from './utils.js';\nimport LatLng, {convert} from './latlng.js';\n\n/**\n * Returns the LatLng resulting from moving a distance from an origin in the \n * specified heading (expressed in degrees clockwise from north).\n * @param {LatLng} from\n * @param {number} distance\n * @param {number} heading\n * @param {number} [radius]\n * @returns {LatLng}\n */\nexport default function computeOffset(\n\tfrom, distance, heading, radius = EARTH_RADIUS\n) {\n\tfrom = convert(from);\n\tdistance /= radius;\n\theading = toRadians(heading);\n\n\tconst fromLat = toRadians(from.lat());\n\tconst cosDistance = Math.cos(distance);\n\tconst sinDistance = Math.sin(distance);\n\tconst sinFromLat = Math.sin(fromLat);\n\tconst cosFromLat = Math.cos(fromLat);\n\tconst sc = cosDistance * sinFromLat + sinDistance \n\t\t* cosFromLat * Math.cos(heading);\n\t\t\n\treturn new LatLng(\n\t\ttoDegrees(Math.asin(sc)),\n\t\ttoDegrees(toRadians(from.lng()) + Math.atan2(sinDistance \n\t\t\t\t* cosFromLat * Math.sin(heading), \n\t\t\tcosDistance - sinFromLat * sc))\n\t);\n}","import LatLng, {convert} from './latlng.js';\nimport computeDistanceBetween from './compute-distance-between.js';\nimport {toRadians, toDegrees} from './utils.js'\n\n/**\n * Returns the LatLng which lies the given fraction of the way between the \n * origin LatLng and the destination LatLng.\n * @param {LatLng} from\n * @param {LatLng} to\n * @param {number} fraction\n * @returns {LatLng} \n */\nexport default function interpolate(from, to, fraction) \n{\n\tfrom = convert(from); to = convert(to);\n\tconst radFromLat = toRadians(from.lat()), radFromLng = toRadians(from.lng());\n\tconst radToLat = toRadians(to.lat()), radToLng = toRadians(to.lng());\n\n\tconst cosFromLat = Math.cos(radFromLat), cosToLat = Math.cos(radToLat);\n\t\n\tconst radDist = computeDistanceBetween(from, to);\n\tconst sinRadDist = Math.sin(radDist);\n\n\tif (sinRadDist < 1e-6) return from;\n\n\tconst a = Math.sin((1 - fraction) * radDist) / sinRadDist;\n\tconst b = Math.sin(fraction * radDist) / sinRadDist;\n\tconst c = a * cosFromLat * Math.cos(radFromLng) \n\t\t+ b * cosToLat * Math.cos(radToLng);\n\tconst d = a * cosFromLat * Math.sin(radFromLng) \n\t\t+ b * cosToLat * Math.sin(radToLng);\n\n\treturn new LatLng(\n\t\ttoDegrees(\n\t\t\tMath.atan2(\n\t\t\t\ta * Math.sin(radFromLat) + b * Math.sin(radToLat),\n\t\t\t\tMath.sqrt(Math.pow(c, 2) + Math.pow(d, 2))\n\t\t\t)\n\t\t),\n\t\ttoDegrees(Math.atan2(d, c))\n\t);\n}","/**\n * Spherical Geometry Library v2.0.0\n * This code is a port of some classes from the Google Maps Javascript API\n * @module spherical-geometry\n * @todo computeOffsetOrigin\n */\n\nexport {default as computeArea} from './compute-area.js';\nexport {default as computeDistanceBetween} from './compute-distance-between.js';\nexport {default as computeHeading} from './compute-heading.js';\nexport {default as computeLength} from './compute-length.js';\nexport {default as computeOffset} from './compute-offset.js';\n//export {default as computeOffsetOrigin} from './compute-offset-origin.js';\nexport {default as computeSignedArea} from './compute-signed-area.js';\nexport {default as interpolate} from './interpolate.js';\n\nexport {default as LatLng, \n\tconvert as convertLatLng, equals as equalLatLngs} from './latlng.js';\nexport * from './utils.js';"],"names":[],"mappings":"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"}